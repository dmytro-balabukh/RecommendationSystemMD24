from ast import literal_eval
from pathlib import Path

import streamlit as st
from plotly.subplots import make_subplots

from pages.helpers.streamlit_ui_helper import StreamlitUiHelper
from src import constants
from src.clients.spotify_client import SpotifyClient
from src.services.content_based_recommendation.cosine_similarity_recommendation_engine import CosineSimilarityRecommendationEngine
from src.services.data_readers.cosine_similarity_data_reader import CosineSimilarityDataReaderPkl
import numpy as np
import plotly.graph_objects as go
import pandas as pd

class CosineSimilarityRecommendationsStreamlitPage:
    def __init__(self):
        self.playlist_raw_link = ''
        self.playlist_size = 0
        self.__spotify_client = SpotifyClient("02aca3b049a74aeba6a820a0ba7e0c50", "513bcf2584eb43518a808ad653dfa9b8")
        self.init_content()
        self.init_sidebar()
        StreamlitUiHelper.hide_deploy_button()

    @staticmethod
    def init_content():
        st.markdown("# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–á –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º–µ—Ç—Ä–∏–∫–∏ –∫–æ—Å–∏–Ω—É—Å–Ω–æ—ó –ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ")
        with st.expander("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫–æ—Å–∏–Ω—É—Å –ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ"):
            path = Path(__file__).parent / "../src/markdowns/cosine_similarity_detailed_description.md"
            print(path)
            st.markdown(open(path, encoding="utf8").read())

    def init_sidebar(self):
        placeholder = st.empty()
        st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")

        with st.sidebar.form(key='Form1'):
            self.playlist_raw_link: str = st.text_input('–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—Ö—ñ–¥–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç')
            self.playlist_size: int = st.slider('–†–æ–∑–º—ñ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞', 5, 20, 12, 1)
            submitted = st.form_submit_button(label='–ó–Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó üîé')

        if submitted:
            placeholder.empty()
            with placeholder.container():
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"):
                    self.generate_recommendations()

    def generate_recommendations(self):
        if self.playlist_raw_link == '' or self.playlist_size == 0:
            st.sidebar.warning('–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –í—ñ–Ω –º–∞—î –±—É—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–º, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –∑—á–∏—Ç–∞—Ç–∏'
                               '–∞—É–¥—ñ–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.')
            return

        playlist_uri = self.__spotify_client.get_playlist_uri_by_raw_link(self.playlist_raw_link)

        # –¥–∞–Ω—ñ –ø—ñ—Å–µ–Ω—å –ø–ª–µ–π–ª–∏—Å—Ç–∞
        playlist_info = self.__spotify_client.get_playlist_info_by_playlist_uri(playlist_uri)
        playlist_tracks = self.__spotify_client.get_spotify_tracks_by_playlist_uri(playlist_uri)
        if not playlist_tracks.is_success:
            st.error(playlist_tracks.message)
            return
        st.toast('–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π', icon='‚öôÔ∏è')

        playlist_name = playlist_info.data['name']
        st.write('# –ê–Ω–∞–ª—ñ–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: ' + playlist_name)

        global_features_model = self.get_global_features_data()
        print(global_features_model)
        dataset_numeric_sparse = global_features_model.dataset_numeric_sparse
        dataset_without_genres = global_features_model.dataset_without_genres
        columns_map = global_features_model.columns_map

        track_ids = [track['track']['id'] for track in playlist_tracks.data['items']]
        client_feature_indices = dataset_without_genres[dataset_without_genres['track_id'].isin(track_ids)]['track_id'].index.to_numpy()
        client_playlist_feature_vector = np.asarray(dataset_numeric_sparse[client_feature_indices].mean(axis=0))
        client_df = dataset_without_genres[dataset_without_genres['track_id'].isin(track_ids)]

        self.show_mean_audio_features_analysis(client_df)
        self.show_features_distibution(client_df)
        self.show_genre_breakdown(client_df)
        self.show_popularity(client_df)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è CosineSimilarityRecommendationEngine –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º
        generator = CosineSimilarityRecommendationEngine(dataset_numeric_sparse, dataset_without_genres)

        # –ì–µ–Ω–µ—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó, –≤–∏–∫–ª—é—á–∞—é—á–∏ —Ç—Ä–µ–∫–∏ –≤ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–º—É –ø–ª–µ–π–ª–∏—Å—Ç—ñ
        recommendations = generator.generate_recommendations(client_playlist_feature_vector, client_feature_indices, self.playlist_size, False)

        # –í–∏–ø–∞–¥–∞–π–∫–∞ –∑ –æ–ø–∏—Å–æ–º –≤–ª–∞—Å—Ç–∏–æ–≤—Å—Ç–µ–π
        with st.expander("–û–ø–∏—Å —è–∫–æ—Å—Ç–µ–π"):
            path = Path(__file__).parent / "../src/markdowns/features_description.md"
            print(path)
            st.markdown(open(path, encoding="utf8").read())

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø—ñ—Å–µ–Ω—å
        st.write('### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø—ñ—Å–µ–Ω—å')
        recommendations_df = dataset_without_genres[
            dataset_without_genres['track_id'].isin(recommendations[:, 6])]
        st.dataframe(
            recommendations_df[
                ['track_name', 'album_name', 'artists', 'artist_genres',
                 'danceability', 'valence', 'acousticness', 'speechiness',
                 'liveness', 'tempo', 'energy', 'instrumentalness']
            ],
            column_config={
                "track_name": st.column_config.Column(label="–ù–∞–∑–≤–∞ —Ç—Ä–µ–∫—É", width='medium'),
                "album_name": "–ù–∞–∑–≤–∞ –∞–ª—å–±–æ–º—É",
                "artists": st.column_config.ListColumn(label="–í–∏–∫–æ–Ω–∞–≤—Ü—ñ"),
                "artist_genres": st.column_config.ListColumn(label="–ñ–∞–Ω—Ä–∏"),
                "danceability": st.column_config.ProgressColumn(
                    "–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω—ñ—Å—Ç—å",
                    min_value=0,
                    max_value=1,
                ),
                "valence": st.column_config.ProgressColumn(
                    "–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                    min_value=0,
                    max_value=1,
                ),
                "acousticness": st.column_config.ProgressColumn(
                    "–ê–∫—É—Å—Ç–∏—á–Ω—ñ—Å—Ç—å",
                    min_value=0,
                    max_value=1,
                ),
                "speechiness": st.column_config.ProgressColumn(
                    "–ú–æ–≤–Ω—ñ—Å—Ç—å",
                    min_value=0,
                    max_value=1,
                ),
                "liveness": st.column_config.ProgressColumn(
                    "–ü—Ä—è–º–∏–π –µ—Ç–µ—Ä",
                    min_value=0,
                    max_value=1,
                ),
                "tempo": st.column_config.NumberColumn(
                    "–¢–µ–º–ø",
                    format="%d",
                ),
                "energy": st.column_config.ProgressColumn(
                    "–ï–Ω–µ—Ä–≥—ñ–π–Ω—ñ—Å—Ç—å",
                    min_value=0,
                    max_value=1,
                ),
                "instrumentalness": st.column_config.ProgressColumn(
                    "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ñ—Å—Ç—å",
                    min_value=0,
                    max_value=1,
                ),
            },
            column_order=["track_name", "album_name", "artists", "artist_genres",
                          "danceability", "valence", "acousticness", "speechiness",
                          "liveness", "tempo", "energy", "instrumentalness"],
            hide_index=True,
            use_container_width=True
        )

        # –ó–≥–µ–Ω–µ—Ä—É–π –ø—Ä–æ–≥—Ä–∞–≤–∞—á –ø—ñ—Å–µ–Ω—å Spotify
        create_playlist_result = self.__spotify_client.create_playlist(recommendations_df['track_id'].values)
        if not create_playlist_result.is_success:
            st.error(create_playlist_result.message)
            return
        created_playlist_id = create_playlist_result.data['id']
        recommendation_playlist_embedding = f'''
        <iframe style="border-radius:12px" src="https://open.spotify.com/embed/playlist/{created_playlist_id}?utm_source=generator"
        width="100%" height="440" frameBorder="0" allowfullscreen=""
        allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>
        '''
        st.markdown(recommendation_playlist_embedding, unsafe_allow_html=True)

    def show_mean_audio_features_analysis(self, client_df):
        st.write('### –°–µ—Ä–µ–¥–Ω—î –ø–æ –∞—É–¥—ñ–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è—Ö')
        col1, col2, col3 = st.columns(3)
        # TODO: Better parse it from spotify instead of local dataset
        client_playlist_feature_vector = (client_df[['energy', 'danceability', 'valence', 'tempo', 'loudness',
                                                     'acousticness', 'instrumentalness', 'liveness', 'speechiness']]
                                          .mean(axis=0))
        counter = 0
        for index, value in client_playlist_feature_vector.items():
            if counter % 3 == 0:
                col1.metric(constants.FEATURES_ANALYSIS_MAP[index], f"{value:.2f}")
            if counter % 3 == 1:
                col2.metric(constants.FEATURES_ANALYSIS_MAP[index], f"{value:.2f}")
            if counter % 3 == 2:
                col3.metric(constants.FEATURES_ANALYSIS_MAP[index], f"{value:.2f}")
            counter += 1

    def show_genre_breakdown(self, client_df):
        st.markdown("### –°–µ–∫—Ç–æ—Ä–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –∂–∞–Ω—Ä—ñ–≤")

        genres_df: pd.DataFrame = client_df['artist_genres'].apply(literal_eval).to_frame().explode("artist_genres")
        trace = go.Pie(labels=genres_df['artist_genres'], values=genres_df['artist_genres'].value_counts().values,
                       hole=.3)
        genre_pie_chart = go.Figure(data=[trace])
        genre_pie_chart.update_layout(transition_duration=500)
        st.plotly_chart(genre_pie_chart)

    def show_popularity(self, client_df):
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏
        fig = make_subplots(rows=1, cols=2, shared_yaxes=False)

        fig.add_trace(go.Bar(x=[x[:30] for x in client_df['track_name']], y=client_df["track_popularity"],
                             name="–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —Ç—Ä–µ–∫—ñ–≤"), 1, 1)
        fig.add_trace(go.Bar(x=[x[:30] for x in client_df['album_name']], y=client_df["album_popularity"],
                             name="–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å –∞–ª—å–±–æ–º—ñ–≤"), 1, 2)

        fig.update_xaxes(tickangle=45)
        fig.update_layout(title=dict(
            text='–ê–Ω–∞–ª—ñ–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ',
            font=dict(size=25)
        ))
        st.plotly_chart(fig)

    def show_features_distibution(self, client_df):
        fig = make_subplots(rows=3, cols=3, shared_yaxes=True, subplot_titles=(
            '<i>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å,–º—Å', '<i>–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω—ñ—Å—Ç—å', '<i>–ï–Ω–µ—Ä–≥—ñ–π–Ω—ñ—Å—Ç—å', '<i>–ì—É—á–Ω—ñ—Å—Ç—å', '<i>–ú–æ–≤–Ω—ñ—Å—Ç—å', '<i>–ê–∫—É—Å—Ç–∏—á–Ω—ñ—Å—Ç—å',
            '<i>–ü—Ä—è–º–∏–π –µ—Ç–µ—Ä', '<i>–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å', '<i>–¢–µ–º–ø'))
        fig.add_trace(go.Histogram(x=client_df['duration_ms'], name='–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å,–º—Å'), row=1, col=1)
        fig.add_trace(go.Histogram(x=client_df['danceability'], name='–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω—ñ—Å—Ç—å'), row=1, col=2)
        fig.add_trace(go.Histogram(x=client_df['energy'], name='–ï–Ω–µ—Ä–≥—ñ–π–Ω—ñ—Å—Ç—å'), row=1, col=3)
        fig.add_trace(go.Histogram(x=client_df['loudness'], name='–ì—É—á–Ω—ñ—Å—Ç—å'), row=2, col=1)
        fig.add_trace(go.Histogram(x=client_df['speechiness'], name='–ú–æ–≤–Ω—ñ—Å—Ç—å'), row=2, col=2)
        fig.add_trace(go.Histogram(x=client_df['acousticness'], name='–ê–∫—É—Å—Ç–∏—á–Ω—ñ—Å—Ç—å'), row=2, col=3)
        fig.add_trace(go.Histogram(x=client_df['liveness'], name='–ü—Ä—è–º–∏–π –µ—Ç–µ—Ä'), row=3, col=1)
        fig.add_trace(go.Histogram(x=client_df['valence'], name='–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å'), row=3, col=2)
        fig.add_trace(go.Histogram(x=client_df['tempo'], name='–¢–µ–º–ø'), row=3, col=3)
        fig.update_layout(height=900, width=900, title=dict(
            text='–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ –∞—É–¥—ñ–æ —è–∫–æ—Å—Ç–µ–π –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞',
            font=dict(size=25)
        ))
        fig.update_layout(template='plotly_dark', bargap=0.01)
        fig.update_yaxes(title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–∫—ñ–≤")

        st.plotly_chart(fig)

    @staticmethod
    @st.cache_data
    def get_global_features_data():
        return (CosineSimilarityDataReaderPkl(
            "C:\\Users\dbala\Documents\\repos\\University\\Data\\content_based_374349_songs_complete.pkl")
                .get_global_features_and_metadata())


st.set_page_config(page_title="Cosine Similarity", page_icon="üé∑")
page = CosineSimilarityRecommendationsStreamlitPage()
