import streamlit as st
import pandas as pd
import scipy.sparse as sp

from pages.helpers.streamlit_ui_helper import StreamlitUiHelper
from src.services.content_based_recommendation.matrix_factorization_data_preprocessor import MatrixFactorizationDataPreprocessor
from src.services.content_based_recommendation.matrix_factorization_recommendation_engine import MatrixFactorizationRecommendationEngine

class MatrixFactorizationRecommendationsStreamlitPage:
    def __init__(self):
        self.init_content()
        self.init_sidebar()
        StreamlitUiHelper.hide_deploy_button()

    @staticmethod
    def init_content():
        st.markdown("# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–∞—Ç—Ä–∏—á–Ω–æ—ó —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
        st.markdown("#### –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à—É —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.")

        with st.expander("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –º–∞—Ç—Ä–∏—á–Ω—É —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é"):
            st.markdown("""
            –ú–∞—Ç—Ä–∏—á–Ω–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è - —Ü–µ —Ç–µ—Ö–Ω—ñ–∫–∞, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
            –í–æ–Ω–∞ —Ä–æ–∑–∫–ª–∞–¥–∞—î –≤–µ–ª–∏–∫—É –º–∞—Ç—Ä–∏—Ü—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –Ω–∞ –¥–æ–±—É—Ç–æ–∫ –¥–≤–æ—Ö –º–µ–Ω—à–∏—Ö –º–∞—Ç—Ä–∏—Ü—å, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å –ª–∞—Ç–µ–Ω—Ç–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏.
            """)

    def init_sidebar(self):
        st.sidebar.header("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å")
        uploaded_file = st.sidebar.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª JSON –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å", type="json")

        if uploaded_file is not None:
            with st.spinner("–û–±—Ä–æ–±–∫–∞ –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å..."):
                self.process_user_history(uploaded_file)

    def process_user_history(self, uploaded_file):
        my_listening_history = pd.read_json(uploaded_file)

        my_listening_history = my_listening_history.groupby(['artistName'], as_index=False).size().reset_index(name='count')

        data_preprocessor = MatrixFactorizationDataPreprocessor(
            user_artists_path='C:\\Users\\dbala\\Documents\\repos\\University\\Data\\collaborative_based_data\\lastfm_artists_dataset\\user_artists.dat',
            artists_path='C:\\Users\\dbala\\Documents\\repos\\University\\Data\\collaborative_based_data\\lastfm_artists_dataset\\artists.dat'
        )
        data_preprocessor.load_data()
        data_preprocessor.preprocess_data()

        my_listening_history_merged = pd.merge(
            my_listening_history,
            data_preprocessor.artists,
            left_on='artistName',
            right_on='name',
            how='inner'
        )

        if my_listening_history_merged.empty:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –≤–∞—à–∏—Ö –∞—Ä—Ç–∏—Å—Ç—ñ–≤ —É –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
            return

        my_listening_history_merged['artist_index'] = my_listening_history_merged['id'].map(data_preprocessor.artist_id_to_index)
        my_listening_history_merged = my_listening_history_merged.dropna(subset=['artist_index'])
        my_listening_history_merged['artist_index'] = my_listening_history_merged['artist_index'].astype(int)

        if my_listening_history_merged.empty:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –≤–∞—à–∏—Ö –∞—Ä—Ç–∏—Å—Ç—ñ–≤ —É –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
            return

        num_items = data_preprocessor.user_item_matrix.shape[1]

        user_items = sp.csr_matrix(
            (my_listening_history_merged['count'],
             ([0]*len(my_listening_history_merged), my_listening_history_merged['artist_index'].values)),
            shape=(1, num_items)
        )

        recommendation_engine = MatrixFactorizationRecommendationEngine(data_preprocessor.user_item_matrix)
        recommendation_engine.train_model()

        recommended_artist_indices, scores = recommendation_engine.recommend_artists(user_items)

        index_to_artist_id = data_preprocessor.index_to_artist_id
        recommended_artist_ids = [index_to_artist_id[idx] for idx in recommended_artist_indices]

        recommended_artists = [data_preprocessor.get_artist_name_by_id(artist_id) for artist_id in recommended_artist_ids]

        st.write('### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∞—Ä—Ç–∏—Å—Ç—ñ–≤ –¥–ª—è –≤–∞—Å:')
        for idx, artist_name in enumerate(recommended_artists, 1):
            st.write(f"{idx}. {artist_name}")

st.set_page_config(page_title="Matrix Factorization Recommendations", page_icon="üéß")
page = MatrixFactorizationRecommendationsStreamlitPage()
